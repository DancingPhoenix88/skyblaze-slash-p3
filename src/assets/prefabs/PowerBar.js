
// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.4 (Phaser v2.6.2)


/**
 * PowerBar.
 * @param {Phaser.Game} aGame A reference to the currently running game.
 * @param {Phaser.Group} aParent The parent Group (or other {@link DisplayObject}) that this group will be added to.    If undefined/unspecified the Group will be added to the {@link Phaser.Game#world Game World}; if null the Group will not be added to any parent.
 * @param {string} aName A name for this group. Not used internally but useful for debugging.
 * @param {boolean} aAddToStage If true this group will be added directly to the Game.Stage instead of Game.World.
 * @param {boolean} aEnableBody If true all Sprites created with {@link #create} or {@link #createMulitple} will have a physics body created on them. Change the body type with {@link #physicsBodyType}.
 * @param {number} aPhysicsBodyType The physics body type to use when physics bodies are automatically added. See {@link #physicsBodyType} for values.
 */
function PowerBar(aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType) {
    
    Phaser.Group.call(this, aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType);
    var _barPower = this.game.add.sprite(47.0, 0.0, 'battle_ui', 'power-bar-low', this);
    _barPower.name = 'barPower';
    _barPower.anchor.set(0.0, 0.5);
    _barPower.animations.add('low', ['power-bar-low'], 1, false);
    _barPower.animations.add('normal', ['power-bar-normal'], 1, false);
    _barPower.animations.add('full', ['power-bar-full'], 1, false);
    
    var _iconPower = this.game.add.sprite(0.0, 0.0, 'battle_ui', 'icon-power-normal', this);
    _iconPower.name = 'iconPower';
    _iconPower.anchor.set(0.0, 0.5);
    var _iconPower_normal = _iconPower.animations.add('normal', ['icon-power-normal'], 1, false);
    _iconPower.animations.add('full', ['icon-power-full'], 1, false);
    _iconPower_normal.play();
    
    var _iconRing = this.game.add.sprite(31.000000000000004, 0.0, 'battle_ui', 'power-bar-drain-rotate', this);
    _iconRing.name = 'iconRing';
    _iconRing.anchor.set(0.5, 0.4719797616981598);
    
    var _fxNewFull = this.game.add.sprite(29.0, 0.0, 'anim_slash_power', 'full_power_frame_01.png', this);
    _fxNewFull.name = 'fxNewFull';
    _fxNewFull.anchor.set(0.5, 0.5);
    var _fxNewFull_idle = _fxNewFull.animations.add('idle', ['empty'], 1, false);
    _fxNewFull.animations.add('active', ['full_power_frame_01.png', 'full_power_frame_02.png', 'full_power_frame_03.png', 'full_power_frame_04.png', 'full_power_frame_05.png', 'full_power_frame_06.png', 'full_power_frame_07.png', 'full_power_frame_08.png', 'full_power_frame_09.png', 'full_power_frame_10.png', 'full_power_frame_11.png', 'full_power_frame_12.png', 'full_power_frame_13.png', 'full_power_frame_14.png', 'full_power_frame_15.png', 'full_power_frame_16.png'], 60, false);
    _fxNewFull_idle.play();
    
    
    
    // fields
    
    this.fBarPower = _barPower;
    this.fIconPower = _iconPower;
    this.fIconRing = _iconRing;
    this.fFxNewFull = _fxNewFull;
    
    this.init();
    
}

/** @type Phaser.Group */
var PowerBar_proto = Object.create(Phaser.Group.prototype);
PowerBar.prototype = PowerBar_proto;
PowerBar.prototype.constructor = PowerBar;

/* --- end generated code --- */
// -- user code here --
PowerBar.prototype.init = function () {
    this.maxPowerBarWidth = this.fBarPower.width;
    this.powerBarCrop = new Phaser.Rectangle( 0, 0, this.maxPowerBarWidth, this.fBarPower.height );
    this.fBarPower.crop( this.powerBarCrop );
    this.fIconRing.visible = false;
}

PowerBar.prototype.set = function (point) {
    var progress = (point / PowerManager.Singleton.getMaxPoint()).clamp(0,1);
//    console.log( 'set power bar = ', point, ' ~ ', progress * 100, '%' );
    
    if (progress < 0.4) {
        this.fBarPower.animations.play( 'low' );
        this.fIconPower.animations.play( 'normal' );
        this.fFxNewFull.animations.play( 'idle' );
    } else if (progress < 0.99) {
        this.fBarPower.animations.play( 'normal' );
        this.fIconPower.animations.play( 'normal' );
        this.fFxNewFull.animations.play( 'idle' );
    } else { // FULL
        this.fBarPower.animations.play( 'full' );
        this.fIconPower.animations.play( 'full' );
        this.fFxNewFull.animations.play( 'active' );
    }
    this.powerBarCrop.width = progress * this.maxPowerBarWidth;
    this.fBarPower.updateCrop();
};

PowerBar.prototype.onActivate = function (multiplier, duration) {
    this.fIconRing.visible = true;
    this.tweenRing = game.tweens.create( this.fIconRing )
        .to({angle:360}, 0.6 * Phaser.Timer.SECOND )
        .loop()
        .start();
    this.tweenBar = game.tweens.create( this.powerBarCrop )
        .to({width:0}, duration)
        .onUpdateCallback( this._onTweenBar, this )
        .start();
    game.time.events.add( duration, this._onActivateEnd, this );
};

PowerBar.prototype._onActivateEnd = function () {
    this.fIconRing.visible = false;
    this.tweenRing.stop();
};

PowerBar.prototype._onTweenBar = function () {
    this.fBarPower.updateCrop();
};