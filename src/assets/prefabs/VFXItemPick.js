
// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.4 (Phaser v2.6.2)


/**
 * VFXItemPick
 * @param {Phaser.Game} aGame A reference to the currently running game.
 * @param {Number} aX The x coordinate (in world space) to position the Sprite at.
 * @param {Number} aY The y coordinate (in world space) to position the Sprite at.
 * @param {any} aKey This is the image or texture used by the Sprite during rendering. It can be a string which is a reference to the Cache entry, or an instance of a RenderTexture or PIXI.Texture.
 * @param {any} aFrame If this Sprite is using part of a sprite sheet or texture atlas you can specify the exact frame to use by giving a string or numeric index.
 */
function VFXItemPick(aGame, aX, aY, aKey, aFrame) {
    Phaser.Sprite.call(this, aGame, aX, aY, aKey || 'anim_item_vfx', aFrame == undefined || aFrame == null? 0 : aFrame);
    this.name = 'vfxItem';
    this.anchor.set(0.2760233739663286, 0.7558479532163742);
    var _anim_idle = this.animations.add('idle', [35], 1, false);
    this.animations.add('active', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], 60, false);
    _anim_idle.play();
    
    // fields
    
    this.fVfxItem = this;
    
}

/** @type Phaser.Sprite */
var VFXItemPick_proto = Object.create(Phaser.Sprite.prototype);
VFXItemPick.prototype = VFXItemPick_proto;
VFXItemPick.prototype.constructor = VFXItemPick;

/* --- end generated code --- */
// -- user code here --
//---------------------------------------------------------------------------------------------------------------
VFXItemPick.prototype.init = function (pool) {
    this._pool = pool;
    this.fVfxItem.animations.getAnimation('active').onComplete.add( this._onCompleteVfx, this );
};
//---------------------------------------------------------------------------------------------------------------
VFXItemPick.prototype.animateFor = function (itemWrapper) {
    this.position = itemWrapper.position;
    this.z        = itemWrapper.z - 1;
    this.fVfxItem.animations.play( 'active' );
};
//---------------------------------------------------------------------------------------------------------------
VFXItemPick.prototype._onCompleteVfx = function () {
    this._pool.returnToItemPickVFXPool( this );
};
//---------------------------------------------------------------------------------------------------------------
Phaser.GameObjectFactory.prototype.vfxItem = function (group, exists) {
    // Copy & edit from: Phaser.Group.prototype.create
    if (exists === undefined) { exists = true; }
    var vfx = new VFXItemPick( this.game, 0, 0 );
    vfx.exists  = exists;
    vfx.visible = exists;
    vfx.alive   = exists;
    return group.add( vfx, false );
};